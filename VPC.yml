AWSTemplateFormatVersion: 2010-09-09
Description: "EY Project VPC Networking Template"

Parameters:
  ApplicationName:
    Description: "App name"
    Type: String
    Default: "EY"

  Environment:
    Description: "Application Environment"
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "test", "stage", "prod"]

  Contact:
    Description: "Contact Email For The Team"
    Type: String

  VPCCIDRBlock:
    Description: "CIDR range for the VPC"
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnet1CIDRBlock:
    Description: "CIDR range for the Public Subnet 1"
    Type: String
    Default: "10.0.1.0/24"
 
  PublicSubnet2CIDRBlock:
    Description: "CIDR range for the Public Subnet 2"
    Type: String
    Default: "10.0.2.0/24"

  PrivateSubnet1CIDRBlock:
    Description: "CIDR range for the Private Subnet 1"
    Type: String
    Default: "10.0.3.0/24"

  PrivateSubnet2CIDRBlock:
    Description: "CIDR range for the Private Subnet 2"
    Type: String
    Default: "10.0.4.0/24"

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:            
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "VPC"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PublicSubnet1CIDRBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "PublicSubnet1"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PublicSubnet2CIDRBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "PublicSubnet2"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet1CIDRBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "PrivateSubnet1"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet2CIDRBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "PrivateSubnet2"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "IGW"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "Route-Table-Public"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: RouteTablePublic

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: RouteTablePublic

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
       RouteTableId:
         Ref: RouteTablePublic
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: InternetGateway

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "Route-Table-Private"] ]
      - Key: App
        Value: !Ref ApplicationName
      - Key: Env
        Value: !Ref Environment
      - Key: Contact
        Value: !Ref Contact

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
        - Key: Name
          Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "NATGateway"] ]
        - Key: App
          Value: !Ref ApplicationName
        - Key: Env
          Value: !Ref Environment
        - Key: Contact
          Value: !Ref Contact

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: RouteTablePrivate

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: RouteTablePrivate

  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref RouteTablePrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-${Environment}-elb-sg"
      GroupDescription: "ELB Security Group"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "Elb-Sg"] ]
        - Key: App
          Value: !Ref ApplicationName
        - Key: Env
          Value: !Ref Environment
        - Key: Contact
          Value: !Ref Contact

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-${Environment}-web-sg"
      GroupDescription: "Web Security Group"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "Web-Sg"] ]
        - Key: App
          Value: !Ref ApplicationName
        - Key: Env
          Value: !Ref Environment
        - Key: Contact
          Value: !Ref Contact

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-${Environment}-app-sg"
      GroupDescription: "App Security Group"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
      Tags:
        - Key: Name
          Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "App-Sg"] ]
        - Key: App
          Value: !Ref ApplicationName
        - Key: Env
          Value: !Ref Environment
        - Key: Contact
          Value: !Ref Contact

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-${Environment}-db-sg"
      GroupDescription: "DB Security Group"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt AppSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      Tags:
        - Key: Name
          Value: !Join [ "-", [!Ref ApplicationName, !Ref Environment, "DB-Sg"] ]
        - Key: App
          Value: !Ref ApplicationName
        - Key: Env
          Value: !Ref Environment
        - Key: Contact
          Value: !Ref Contact

Outputs:
  VpcID:
    Description: "VPC ID"
    Value: !Ref myVPC
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-VPCID"

  PublicSubnet1ID:
    Description: "Public Subnet 1 ID"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-PublicSubnet1ID"

  PublicSubnet2ID:
    Description: "Public Subnet 2 ID"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-PublicSubnet2ID"

  PrivateSubnet1ID:
    Description: "Private Subnet 1 ID"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-PrivateSubnet1ID"

  PrivateSubnet2ID:
    Description: "Private Subnet 2 ID"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-PrivateSubnet2ID"

  ELBSecurityGroupID:
    Description: "ELB Security Group ID"
    Value: !GetAtt ELBSecurityGroup.GroupId
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-ELBSecurityGroupID"

  WebSecurityGroupID:
    Description: "Web Security Group ID"
    Value: !GetAtt WebSecurityGroup.GroupId
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-WebSecurityGroupID"

  AppSecurityGroupID:
    Description: "App Security Group ID"
    Value: !GetAtt AppSecurityGroup.GroupId
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-AppSecurityGroupID"

  DBSecurityGroupID:
    Description: "DB Security Group ID"
    Value: !GetAtt DBSecurityGroup.GroupId
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-DBSecurityGroupID"
